//License: https://github.com/TWal/rubik.js/blob/master/LICENSE

Rubikjs.WebGL.Buffer=function(a,b,c){this.gl=a;this.type=c||this.gl.ARRAY_BUFFER;this.buffer=this.gl.createBuffer();void 0!=b&&0!=b.length&&this.feed(b)};Rubikjs.WebGL.Buffer.prototype=new Rubikjs.Buffer;Rubikjs.WebGL.Buffer.prototype.constructor=Rubikjs.WebGL.Buffer;Rubikjs.WebGL.Buffer.prototype.feed=function(a){this.data=a;this.bind();this.gl.bufferData(this.type,new (this.type==this.gl.ARRAY_BUFFER?Float32Array:Uint16Array)(this.data),this.gl.STATIC_DRAW)};
Rubikjs.WebGL.Buffer.prototype.bind=function(){this.gl.boundBuffer!=this.buffer&&(this.gl.bindBuffer(this.type,this.buffer),this.gl.boundBuffer=this.buffer)};
Rubikjs.WebGL.Renderer=function(a){Rubikjs.Renderer.call(this,a);a="canvas"==a.localName?a:null;try{this.gl=a.getContext("experimental-webgl"),void 0==this.gl&&(this.gl=a.getContext("webgl")),void 0==this.gl&&alert("No WebGL :(")}catch(b){}this.gl.enable(this.gl.DEPTH_TEST);this.shader=new Rubikjs.WebGL.Shader(this.gl);this.shader.compile("#ifdef GL_ES\nprecision highp float;\n#endif\nattribute vec3 aVertexPosition;attribute vec4 aVertexColor;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;varying vec4 vColor;void main(void) {gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);vColor = aVertexColor;}","#ifdef GL_ES\nprecision highp float;\n#endif\nvarying vec4 vColor;void main(void) {gl_FragColor = vColor;}").uniform("uPMatrix",
this.perspectiveMat,"mat4")};Rubikjs.WebGL.Renderer.prototype=new Rubikjs.Renderer;Rubikjs.WebGL.Renderer.prototype.constructor=Rubikjs.WebGL.Renderer;Rubikjs.WebGL.Renderer.prototype.startFrame=function(){this.gl.clearColor(0,0,0,0);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT)};
Rubikjs.WebGL.Renderer.prototype.render=function(a){this.shader.uniform("uPMatrix",this.perspectiveMat,"mat4");this.shader.attrib("aVertexPosition",a.vertexBuffer,3).attrib("aVertexColor",a.colorBuffer,4).uniform("uMVMatrix",a.transform,"mat4");this.shader.use();a.indexBuffer.bind();this.gl.drawElements(this.gl.TRIANGLES,a.indexBuffer.data.length,this.gl.UNSIGNED_SHORT,0)};Rubikjs.WebGL.Renderer.prototype.endFrame=function(){};
Rubikjs.WebGL.Renderer.prototype.createMesh=function(){var a=new Rubikjs.Mesh;a.vertexBuffer=new Rubikjs.WebGL.Buffer(this.gl,[],this.gl.ARRAY_BUFFER);a.colorBuffer=new Rubikjs.WebGL.Buffer(this.gl,[],this.gl.ARRAY_BUFFER);a.indexBuffer=new Rubikjs.WebGL.Buffer(this.gl,[],this.gl.ELEMENT_ARRAY_BUFFER);return a};Rubikjs.WebGL.Shader=function(a){this.gl=a;this.vertexShader=this.gl.createShader(this.gl.VERTEX_SHADER);this.fragmentShader=this.gl.createShader(this.gl.FRAGMENT_SHADER);this.program=this.gl.createProgram()};
Rubikjs.WebGL.Shader.prototype.compile=function(a,b){this.gl.shaderSource(this.vertexShader,a);this.gl.compileShader(this.vertexShader);this.gl.getShaderParameter(this.vertexShader,this.gl.COMPILE_STATUS)||console.error("Vertex shader compiled wrong: "+this.gl.getShaderInfoLog(this.vertexShader));this.gl.shaderSource(this.fragmentShader,b);this.gl.compileShader(this.fragmentShader);this.gl.getShaderParameter(this.fragmentShader,this.gl.COMPILE_STATUS)||console.error("Fragment shader compiled wrong: "+
this.gl.getShaderInfoLog(this.fragmentShader));this.gl.attachShader(this.program,this.vertexShader);this.gl.attachShader(this.program,this.fragmentShader);this.gl.linkProgram(this.program);this.gl.getProgramParameter(this.program,this.gl.LINK_STATUS)||console.error("Program linked wrong: "+this.gl.getProgramInfoLog(this.program));return this};
Rubikjs.WebGL.Shader.prototype.attrib=function(a,b,c){this.use();b.bind();a=this.gl.getAttribLocation(this.program,a);this.gl.enableVertexAttribArray(a);this.gl.vertexAttribPointer(a,c,this.gl.FLOAT,!1,0,0);return this};
Rubikjs.WebGL.Shader.prototype.uniform=function(a,b,c){this.use();a=this.gl.getUniformLocation(this.program,a);switch(c){case "int":this.gl.uniform1iv(a,b);break;case "float":this.gl.uniform1fv(a,b);break;case "bool":this.gl.uniform1iv(a,b);break;case "mat3":this.gl.uniformMatrix3fv(a,!1,b);break;case "mat4":this.gl.uniformMatrix4fv(a,!1,b);break;case "vec2":this.gl.uniform2fv(a,b);break;case "vec3":this.gl.uniform3fv(a,b);break;case "vec4":this.gl.uniform4fv(a,b)}return this};
Rubikjs.WebGL.Shader.prototype.use=function(){this.gl.usedProgram!=this.program&&(this.gl.useProgram(this.program),this.gl.usedProgram=this.program)};
